# Initialize simulation
include ${INC}/initSoftWall.mod
#units metal
#dimension 3
#boundary p p p

#atom_style atomic
#atom_modify map array


# Create geometry
variable box_length equal 11.0
lattice fcc 3.52

variable xhi equal 0.5*${box_length}+0.25
variable xlo equal -0.5*${box_length}+0.25
region box block ${xlo} ${xhi} ${xlo} ${xhi} -1.25 1.75
create_box 2 box
create_atoms 1 box

# create vacancy
#variable rndatom equal floor(random(1,count(all),${rnd}))
#group vacancy id ${rndatom}
#delete_atoms group vacancy
#
#delete_atoms random count 1 no all NULL ${rnd}

# Create a vacancy (within "no_buffer")
variable rmin equal 0.5*${box_length}-3.0
label loop_start
variable num_vacancy loop ${nvac}
variable ix equal floor(random(${rmin},0.5*${box_length},${rnd}))
variable iy equal floor(random(${rmin},0.5*${box_length},${rnd1}))
variable sign_x equal random(-1.0,1.0,${rnd2})
variable sign_xx equal ${sign_x}
variable sign_y equal random(-1.0,1.0,${rnd3})
variable sign_yy equal ${sign_y}
if "${sign_xx} >= 0.0" then &
  "variable sign_xxx equal 1.0" &
else &
  "variable sign_xxx equal -1.0" 
if "${sign_yy} >= 0.0" then &
  "variable sign_yyy equal 1.0" &
else &
  "variable sign_yyy equal -1.0" 
variable ixx equal ${ix}*${sign_xxx}
variable iyy equal ${iy}*${sign_yyy}
variable xlo equal ${ixx}-0.25
variable xhi equal ${ixx}+0.25
variable ylo equal ${iyy}-0.25
variable yhi equal ${iyy}+0.25
region vacancy block ${xlo} ${xhi} ${ylo} ${yhi} -0.4 0.4 units lattice
group vacancy_group region vacancy
# Assert that group boundary has only one atom
variable num_atoms equal count(vacancy_group)
if "${num_atoms} != 1" then &
	print "num_atoms=${num_atoms} Error: Boundary group does not have exactly one atom." &
    print "Halting simulation." &
    quit
delete_atoms group vacancy_group
region vacancy delete
next num_vacancy
jump ${INC}/in.vac loop_start
label break
variable num_vacancy delete


# Define mass for Ni atoms
mass 1 58.6934
mass 2 58.6934

# Define potential
include ${INC}/potential.mod

#--- minimize 
minimize ${etol} ${ftol} ${maxiter} ${maxeval} #--- initial state is already in equilibrium!


#--- to be used for kmc
write_data                ${WriteData} 


# Set velocities
variable				  Tinit     equal     0.1
velocity                  all create     ${Tinit}     ${rnd}  mom    yes  rot  yes  dist  gaussian  # Dynamics starts
fix                      f1        all nvt temp   ${Tinit}  $T  ${damp_t}  
run 30000

unfix f1
variable                  t_eq      equal     ${time}*${damp_t}         # Equlibration time
variable 				  Nstep  	equal	  floor(${t_eq}/${dt}) #--- timesteps
fix                      f1        all nvt temp   $T  $T  ${damp_t}  

# Define fix for MSD computation
compute msd_all all msd
dump        1 all custom ${nevery} ${OUT_PATH}/${DumpFile} id type x y z
dump_modify 1 flush yes format line "%d %d %4.3e %4.3e %4.3e"
include ${INC}/thermo.mod

# Define fix for averaging and printing MSD
fix 1 all ave/time 1 1 1000 c_msd_all[*] file msd.dat

# Define fix and run
run                       ${Nstep}
